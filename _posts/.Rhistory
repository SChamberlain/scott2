url2 <- paste0(url, doi)
url2
tt <- getURL(url2)
out <- xmlParse(tt)
out
#' Get full text eLife papers via XML.
#'
#' @import XML
#' @param doi DOI to get full text for.
#' @examples \dontrun{
#' elife_paper(doi="10.7554/eLife.00160")
#' }
#' @export
elife_paper <- function(doi = NULL)
{
url <- "http://elife.elifesciences.org/elife-source-xml/"
url2 <- paste0(url, doi)
tt <- getURL(url2)
out <- xmlParse(tt)
out
}
elife_paper(doi="10.7554/eLife.00160")
out
xpathApply(out, "//abstract")
xpathSApply(out, "//abstract")
getNodeSet(out, "//abstract")
abstracts <- getNodeSet(out, "//abstract")
xpathApply(abstracts, "//p hwp:id")
getNodeSet(out, "//abstract", xmlValue)
getNodeSet(out, "//abstract/p hwp:id")
getNodeSet(out, "//abstract/p")
getNodeSet(out, "//abstract/p", xmlValue)
abstracts <- getNodeSet(out, "//abstract/p")
xpathApply(abstracts, "//p")
out
out
getNamespace(out)
getNamespaceName(out)
abstracts <- getNodeSet(out, "//abstract/p", namespaces="http://schema.highwire.org/Publishing")
abstracts <- getNodeSet(out, "//abstract/p", namespaces="org.highwire.hpp")
abstracts <- getNodeSet(out, "//abstract/p", namespaces="http://www.w3.org/2001/XMLSchema-instance")
abstracts <- getNodeSet(out, "//abstract/p", namespaces="http://schema.highwire.org/Journal")
library(XML)
help(package="XML")
getDefaultNamespace(out)
xmlNamespace(out)
xmlNamespace(abstracts)
abstracts[[1]]
xmlNamespace(abstracts[[1]])
out
xpathApply(abstracts, namespaces="p hwp")
getNodeSet(out, "//abstract")
getNodeSet(out, "//abstract", "p hwp")
getNodeSet(out, "//abstract", "p")
getNodeSet(out, "//abstract", "hwp")
abstracts <-
getNodeSet(out, "//abstract", "hwp")
sapply(abstracts, xmlValue)
abstracts <-
getNodeSet(out, "//abstract/p")
abstracts
getNodeSet(out, "//abstract/p", xmlValue)
getNodeSet(out, "//abstract/p", fun=xmlValue)
abstracts <- getNodeSet(out, "//abstract/p", fun=xmlValue)
grep(abstracts, "DOI")
grep("DOI", abstracts)
abstracts[grep("DOI", abstracts)]
abstracts[!grep("DOI", abstracts)]
abstracts[-grep("DOI", abstracts)]
paste0(abstracts[-grep("DOI", abstracts)])
paste0(abstracts[-grep("DOI", abstracts)], collapse=" ")
out
getNodeSet(out, "//body")
xpathApply(getNodeSet(out, "//body"), "//title='Introduction'")
getNodeSet(out, "//body[title='Introduction']")
getNodeSet(out, "//body//[title='Introduction']")
getNodeSet(out, "//body/[title='Introduction']")
out
getNodeSet(out, "//body")
getNodeSet(out, "//sec")
getNodeSet(out, "//sec-type")
getNodeSet(out, "//sec sec-type")
getNodeSet(out, "//sec/sec-type")
xpathApply(out, "//sec-type='intro'")
xpathSApply(out, "//sec-type='intro'")
xpathSApply(out, "//sec")
xpathSApply(out, "//sec:sec-type")
xpathApply(out, "//sec:sec-type")
getNodeSet(out, "//sec:sec-type")
getNodeSet(out, "//sec[sec-type]")
getNodeSet(out, "//sec[:sec-type]")
getNodeSet(out, "//sec:sec-type")
getNodeSet(out, "//title")
getNodeSet(out, "//sec[sec-type='intro']")
xpathApply(out, "//sec[sec-type='intro']")
getNodeSet(out, "//body/sec")
getNodeSet(out, "//body/sec")
library(RCurl XML RJSONIO plyr)
req
library(sacbox)
help(package=:)
help(package="sacbox")
req(list("XML", "RJSONIO", "plyr", "RCurl", "stringr"))
sacbox::req(list("XML", "RJSONIO", "plyr", "RCurl", "stringr"))
#' Easy require/library.
#'
#' @param x Vector of quoted package names to load.
#' @examples
#' req(list("XML", "doMC", "plyr", "RCurl", "stringr"))
#' @export
req <- function(x) {
lapply(x, FUN = function(X) {
do.call("require", list(X))
})
}
req(list("XML", "RJSONIO", "plyr", "RCurl", "stringr"))
library(roxygen2)
sacbox <- "/Users/scottmac2/github/sac/sacbox"
roxygenise(sacbox)
doi=c("10.7554/eLife.00160","10.7554/eLife.00248")
dois=c("10.7554/eLife.00160","10.7554/eLife.00248")
url <- "https://fluiddb.fluidinfo.com/values"
query <- paste0("elifesciences.org/api_v1/article/doi=", '"', doi, '"')
query
dois
foo <- function(doi){
query <- paste0("elifesciences.org/api_v1/article/doi=", '"', doi, '"')
args <- compact(list(query = query, tag = "*"))
tt <- getForm(url, .params=args)
fromJSON(tt)
}
llply(dois, foo)
terms="cell biology"
paste(terms, collapse="+")
paste(terms, sep="+")
paste(terms, sep="", collapse="+")
paste0(terms, collapse="+")
paste0(terms, collapse="\\+")
paste0(terms, collapse="\+")
paste0(terms, sep="+")
gsub("\\s", "+", terms)
searchin="subject_area"
paste0("elifesciences.org/api_v1/article/", searchin, '"', gsub("\\s", "+", terms), '"')
if(give=="doi"){give2 <- "elifesciences.org/api_v1/article/doi"} else{NULL}
give = "doi"
if(give=="doi"){give2 <- "elifesciences.org/api_v1/article/doi"} else{NULL}
give2
compact(list(query = query, tag = give2))
query <- paste0("elifesciences.org/api_v1/article/", searchin, '"', gsub("\\s", "+", terms), '"')
query
args <- compact(list(query = query, tag = give2))
args
url <- "https://fluiddb.fluidinfo.com/objects"
tt <- getForm(url, .params=args)
searchin
query <- paste0("elifesciences.org/api_v1/article/", searchin, "+contains", '"', gsub("\\s", "+", terms), '"')
query
args <- compact(list(query = query, tag = give2))
tt <- getForm(url, .params=args)
args
terms="Cell biology"
query <- paste0("elifesciences.org/api_v1/article/", searchin, "+contains", '"', gsub("\\s", "+", terms), '"')
args <- compact(list(query = query, tag = give2))
tt <- getForm(url, .params=args)
fromJSON(getURL(
'https://fluiddb.fluidinfo.com/objects?query=elifesciences.org/api_v1/article/subject_area+contains+"Cell+biology"&tag=elifesciences.org/api_v1/article/doi'
))
query <- paste0("elifesciences.org/api_v1/article/", searchin, "+contains+", '"', gsub("\\s", "+", terms), '"')
args <- compact(list(query = query, tag = give2))
tt <- getForm(url, .params=args)
args
query <- paste0("elifesciences.org/api_v1/article/", searchin, "+contains+", gsub("\\s", "+", terms))
query
if(give=="doi"){give2 <- "elifesciences.org/api_v1/article/doi"} else{NULL}
args <- compact(list(query = query, tag = give2))
tt <- getForm(url, .params=args)
args
paste0(url, "?query=", query, "&tag=", tag)
tag = give2
tag
paste0(url, "?query=", query, "&tag=", tag)
getURL(paste0(url, "?query=", query, "&tag=", tag))
getURL("https://fluiddb.fluidinfo.com/objects?query=elifesciences.org/api_v1/article/subject_area+contains+'Cell+biology'&tag=elifesciences.org/api_v1/article/doi")
getURL('https://fluiddb.fluidinfo.com/objects?query=elifesciences.org/api_v1/article/subject_area+contains+"Cell+biology"&tag=elifesciences.org/api_v1/article/doi')
query <- paste0("elifesciences.org/api_v1/article/", searchin, "+contains+", '"', gsub("\\s", "+", terms), '"')
query
dois="10.7554/eLife.00160"
url <- "https://fluiddb.fluidinfo.com/values"
query <- paste0("elifesciences.org/api_v1/article/doi=", '"', doi, '"')
query
doi<-dois
doi
query <- paste0("elifesciences.org/api_v1/article/doi=", '"', doi, '"')
query
args <- compact(list(query = query, tag = "*"))
args
tt <- getForm(url, .params=args)
tt
fromJSON(tt)
url <- "https://fluiddb.fluidinfo.com/objects"
query <- paste0("elifesciences.org/api_v1/article/", searchin, "+contains+", '"', gsub("\\s", "+", terms), '"')
query
paste0(url, "?query=", query, "&tag=", tag)
fullurl <- paste0(url, "?query=", query, "&tag=", tag)
getURL(fullurl)
if(give=="doi"){tag <- "elifesciences.org/api_v1/article/doi"} else{NULL}
tag
fullurl <- paste0(url, "?query=", query, "&tag=", tag)
getURL(fullurl)
fromJSON(getURL(fullurl))
getURL(fullurl)
url <- "https://fluiddb.fluidinfo.com/values"
fullurl <- paste0(url, "?query=", query, "&tag=", tag)
fromJSON(getURL(fullurl))
out <- fromJSON(getURL(fullurl))
llply(out, "[[")
llply(out, "[")
llply(out[[1]], )
out$results
out$results$id
out$results$id[[1]]
llply(out$results$id, "value")
llply(out$results$id, "//value")
llply(out$results$id, function(x) x$value)
out$results$id[["value"]]
out$results$id["value"]
out$results$id[[1]]
out$results$id[[1]]["value"]
out$results$id[[1]][["value"]]
out$results$id[[1]][,4]
llply(out$results$id, function(x) x[[1]]$value)
llply(out$results$id, function(x) x[[1]])
llply(out$results$id, function(x) x[[1]][,"value"])
llply(out$results$id, function(x) x[[1]][,4])
llply(out$results$id, function(x) x[[1]][,4])
llply(out$results$id, function(x) x[[1]][[1]][,4])
llply(out$results$id, function(x) x[,4])
llply(out$results$id, function(x) x)
llply(out$results$id, function(x) x[[1]])
llply(out$results$id, function(x) x[[1]][[1]])
llply(out$results$id, function(x) x[[1]][[4]])
llply(out$results$id, function(x) x[[1]][[3]])
llply(out$results$id, function(x) x[[1]]["value"])
llply(out$results$id, function(x) x[[1]][["value"]])
laply(out$results$id, function(x) x[[1]][["value"]])
#' Make an eLife API call.
#'
#' @import RCurl XML RJSONIO plyr
#' @param terms Search terms.
#' @param
#' @examples \dontrun{
#' searchelife(terms="Cell biology", searchin="subject_area")
#' }
#' @export
searchelife <- function(terms, searchin = NULL, give = "doi")
{
url <- "https://fluiddb.fluidinfo.com/values"
query <- paste0("elifesciences.org/api_v1/article/", searchin, "+contains+", '"', gsub("\\s", "+", terms), '"')
if(give=="doi"){tag <- "elifesciences.org/api_v1/article/doi"} else{NULL}
fullurl <- paste0(url, "?query=", query, "&tag=", tag)
out <- fromJSON(getURL(fullurl))
laply(out$results$id, function(x) x[[1]][["value"]])
# 	args <- compact(list(query = query, tag = give2))
# 	tt <- getForm(url, .params=args)
}
# fromJSON(getURL("https://fluiddb.fluidinfo.com/values?query=has%20elifesciences.org/api_v1/article/accepted_date_month"))
# fromJSON(getURL(
# 	'https://fluiddb.fluidinfo.com/objects?query=elifesciences.org/api_v1/article/subject_area+contains+"Cell+biology"&tag=elifesciences.org/api_v1/article/doi'
# 	))
# fromJSON(
# 	getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/article/doi="10.7554/eLife.00013"&tag=*')
# 	)
# fromJSON(getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/component/article_doi="10.7554/eLife.00013"&tag=*'))
# fromJSON(getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/component/type="fig"&tag=elifesciences.org/api_v1/component/doi_url'))
# fromJSON(getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/article/author=""&tag=*'))
searchelife(terms="Cell biology", searchin="subject_area")
searchelife(terms="Cell biology", searchin="abstract")
searchelife(terms="drosophila", searchin="research_organism")
#' searchelife(terms="*", searchin="research_organism")
searchelife(terms="*", searchin="research_organism")
searchelife <- function(terms, searchin = NULL, boolean, give = "doi")
{
url <- "https://fluiddb.fluidinfo.com/values"
query <- paste0("elifesciences.org/api_v1/article/", searchin, "+", boolean, "+", '"', gsub("\\s", "+", terms), '"')
if(give=="doi"){tag <- "elifesciences.org/api_v1/article/doi"} else{NULL}
fullurl <- paste0(url, "?query=", query, "&tag=", tag)
out <- fromJSON(getURL(fullurl))
laply(out$results$id, function(x) x[[1]][["value"]])
# 	args <- compact(list(query = query, tag = give2))
# 	tt <- getForm(url, .params=args)
}
# fromJSON(getURL("https://fluiddb.fluidinfo.com/values?query=has%20elifesciences.org/api_v1/article/accepted_date_month"))
# fromJSON(getURL(
# 	'https://fluiddb.fluidinfo.com/objects?query=elifesciences.org/api_v1/article/subject_area+contains+"Cell+biology"&tag=elifesciences.org/api_v1/article/doi'
# 	))
# fromJSON(
# 	getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/article/doi="10.7554/eLife.00013"&tag=*')
# 	)
# fromJSON(getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/component/article_doi="10.7554/eLife.00013"&tag=*'))
# fromJSON(getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/component/type="fig"&tag=elifesciences.org/api_v1/component/doi_url'))
# fromJSON(getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/article/author=""&tag=*'))
searchelife(terms="Cell biology", searchin="abstract", "contains")
searchelife(terms="Cell biology", searchin="abstract", boolean="contains")
searchelife(terms="Cell biology", searchin="subject_area", boolean="contains")
searchelife(terms="hormone", searchin="article_title", boolean="matches")
searchelife(terms="hormone", searchin="abstract", boolean="matches")
query
terms="hormone"
term2="or"
searchin=c("article_title","abstract")
boolean="matches"
searchin
getquery <- function(x) paste0("elifesciences.org/api_v1/article/", searchin, "+", boolean, "+", '"', gsub("\\s", "+", terms), '"')
getquery
getquery <- function(x) paste0("elifesciences.org/api_v1/article/", x, "+", boolean, "+", '"', gsub("\\s", "+", terms), '"')
getquery(searchin[[1]])
getquery(searchin[[2]])
laply(searchin, getquery)
paste0(laply(searchin, getquery), "")
paste(laply(searchin, getquery), "")
paste(laply(searchin, getquery))
paste(laply(searchin, getquery), sep="")
paste(laply(searchin, getquery), sep="", collapse="")
paste(laply(searchin, getquery), sep="", collapse="+", term2, "+")
paste0("+", term2, "+")
paste(laply(searchin, getquery), sep="", collapse=paste0("+", term2, "+"))
query <- paste(laply(searchin, getquery), sep="", collapse=paste0("+", term2, "+"))
query
if(give=="doi"){tag <- "elifesciences.org/api_v1/article/doi"} else{NULL}
fullurl <- paste0(url, "?query=", query, "&tag=", tag)
fullurl
out <- fromJSON(getURL(fullurl))
out
laply(out$results$id, function(x) x[[1]][["value"]])
#' Make an eLife API call.
#'
#' @import RCurl XML RJSONIO plyr
#' @param terms Search terms.
#' @param
#' @examples \dontrun{
#' # Simpler queries
#' searchelife(terms="Cell biology", searchin="subject_area", boolean="contains")
#' searchelife(terms="hormone", searchin="article_title", boolean="matches")
#' searchelife(terms="hormone", searchin="abstract", boolean="matches")
#' searchelife(terms="hormone", searchin="article_title", boolean="matches")
#'
#' # more complicated queries
#' searchelife(terms="hormone", term2="or", searchin=c("article_title","abstract"), boolean="matches")
#' }
#' @export
searchelife <- function(terms, term2 = "or", searchin = NULL, boolean, give = "doi")
{
url <- "https://fluiddb.fluidinfo.com/values"
if(length(searchin)==1){
query <- paste0("elifesciences.org/api_v1/article/", searchin, "+", boolean, "+", '"', gsub("\\s", "+", terms), '"')
if(give=="doi"){tag <- "elifesciences.org/api_v1/article/doi"} else{NULL}
fullurl <- paste0(url, "?query=", query, "&tag=", tag)
out <- fromJSON(getURL(fullurl))
laply(out$results$id, function(x) x[[1]][["value"]])
} else
{
getquery <- function(x) paste0("elifesciences.org/api_v1/article/", x, "+", boolean, "+", '"', gsub("\\s", "+", terms), '"')
query <- paste(laply(searchin, getquery), sep="", collapse=paste0("+", term2, "+"))
if(give=="doi"){tag <- "elifesciences.org/api_v1/article/doi"} else{NULL}
fullurl <- paste0(url, "?query=", query, "&tag=", tag)
out <- fromJSON(getURL(fullurl))
laply(out$results$id, function(x) x[[1]][["value"]])
}
}
# fromJSON(getURL("https://fluiddb.fluidinfo.com/values?query=has%20elifesciences.org/api_v1/article/accepted_date_month"))
# fromJSON(getURL(
# 	'https://fluiddb.fluidinfo.com/objects?query=elifesciences.org/api_v1/article/subject_area+contains+"Cell+biology"&tag=elifesciences.org/api_v1/article/doi'
# 	))
# fromJSON(
# 	getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/article/doi="10.7554/eLife.00013"&tag=*')
# 	)
# fromJSON(getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/component/article_doi="10.7554/eLife.00013"&tag=*'))
# fromJSON(getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/component/type="fig"&tag=elifesciences.org/api_v1/component/doi_url'))
# fromJSON(getURL('https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/article/author=""&tag=*'))
https://fluiddb.fluidinfo.com/values?query=elifesciences.org/api_v1/article/article_title+matches+%22hormone%22+or+elifesciences.org/api_v1/article/abstract+matches+%22little%22&tag=elifesciences.org/api_v1/article/doi_url
searchelife(terms="Cell biology", searchin="subject_area", boolean="contains")
searchelife(terms="hormone", searchin="article_title", boolean="matches")
searchelife(terms="hormone", term2="or", searchin=c("article_title","abstract"), boolean="matches")
searchelife(terms="hormone", term2="and", searchin=c("article_title","abstract"), boolean="matches")
elife <- "/Users/scottmac2/github/sac/elife"
elife
elife <- "/Users/scottmac2/github/ropensci/elife"
library(roxygen2)
roxygenise(elife)
roxygenise(elife)
roxygenise(elife)
roxygenise(elife)
library(staticdocs); library(parser)
build_package("/Users/scottmac2/github/ropensci/rgbif_sd", "/Users/scottmac2/github/ropensci/rgbif_sd/help", examples=TRUE)
build_package("/Users/scottmac2/github/ropensci/rgbif_sd", "/Users/scottmac2/github/ropensci/rgbif_sd/help", examples=FALSE)
check("/Users/scottmac2/github/ropensci/rgbif_sd")
build_package("/Users/scottmac2/github/ropensci/rgbif_sd", "/Users/scottmac2/github/ropensci/rgbif_sd/help", examples=TRUE)
nodontrun("/Users/scottmac2/github/ropensci/rplos_sd/R")
nodontrun <- function(x) {
setwd(x)
files <- dir(x)
foo <- function(y){
dat <- readLines(y)
# 		dat[grep("@examples", dat)] <- "#' @examples"
dat[grep("dontrun", dat)] <- "#' @examples"
dat[grep("#' }", dat)][[1]] <- "#' "
# 		dat[grep("#' }", dat)] <- ""
write(dat, paste("~/newdirectory/R/", y, sep=''))
}
l_ply(files, foo)
}
nodontrun("/Users/scottmac2/github/ropensci/rplos_sd/R")
library(plyr); library(roxygen2)
nodontrun("/Users/scottmac2/github/ropensci/rplos_sd/R")
nodontrun("/Users/scottmac2/github/ropensci/rplos_sd/R")
roxygenize("/Users/scottmac2/github/ropensci/rplos_sd")
install.packages("googleVis")
roxygenize("/Users/scottmac2/github/ropensci/rplos_sd")
build_package("/Users/scottmac2/github/ropensci/rplos_sd", "/Users/scottmac2/github/ropensci/rplos_sd/help", examples=TRUE)
install_github("staticdocs")
library(staticdocs); library(parser)
build_package("/Users/scottmac2/github/ropensci/rplos_sd", "/Users/scottmac2/github/ropensci/rplos_sd/help", examples=TRUE)
build_package("/Users/scottmac2/github/ropensci/taxize_sd", "/Users/scottmac2/github/ropensci/taxize_sd/help", examples=TRUE)
build_package("/Users/scottmac2/github/ropensci/rplos_sd", "/Users/scottmac2/github/ropensci/rplos_sd/help", examples=TRUE)
build_package("/Users/scottmac2/github/ropensci/rplos_sd", "/Users/scottmac2/github/ropensci/rplos_sd/help", examples=TRUE)
build_package("/Users/scottmac2/github/ropensci/rplos_sd", "/Users/scottmac2/github/ropensci/rplos_sd/help", examples=TRUE)
build_package("/Users/scottmac2/github/ropensci/rplos_sd", "/Users/scottmac2/github/ropensci/rplos_sd/help", examples=TRUE)
library(staticdocs); library(parser); library(highlight)
build_package("/Users/scottmac2/github/ropensci/rplos_sd", "/Users/scottmac2/github/ropensci/rplos_sd/help", examples=TRUE)
build_package("/Users/scottmac2/github/ropensci/rplos_sd", "/Users/scottmac2/github/ropensci/rplos_sd/help", examples=TRUE)
nodontrun("/Users/scottmac2/github/ropensci/rplos_sd/R")
roxygenize("/Users/scottmac2/github/ropensci/rplos_sd")
library(plyr); library(roxygen2)
roxygenize("/Users/scottmac2/github/ropensci/rplos_sd")
build_package("/Users/scottmac2/github/ropensci/rplos_sd", "/Users/scottmac2/github/ropensci/rplos_sd/help", examples=TRUE)
package="/Users/scottmac2/github/ropensci/rplos_sd"
base_path="/Users/scottmac2/github/ropensci/rplos_sd/help"
load_all(package)
examples=TRUE
package <- package_info(package, base_path, examples)
package_info(package, base_path, examples)
package_info
package
out <- as.package(package)
out
settings <- load_settings(out)
load_settings
settings <- staticdocs:::load_settings(out)
load_settings
staticdocs:::load_settings
pkg_sd_path
staticdocs:::pkg_sd_path
file.path(pkg_sd_path(package), "index.r")
file.path(staticdocs:::pkg_sd_path(package), "index.r")
staticdocs:::pkg_sd_path(package)
package
package
file.path(package$path, "inst", "staticdocs")
file.path(package$path, "inst", "staticdocs")
package$path
package
build_package(package="/Users/scottmac2/github/ropensci/rplos_sd", base_path="/Users/scottmac2/github/ropensci/rplos_sd/staticdocs", examples=TRUE)
alm(doi="10.1371/journal.pone.0029797")
out <- alm(doi='10.1371/journal.pone.0029797', info='detail')
out[["totals"]] # get totals summary data.frame
out[["history"]] # get history summary data.frame
alm(pmid=22590526)
alm(pmcid=212692, info='summary')
alm(mdid="35791700-6d00-11df-a2b2-0026b95e3eb7")
dois <- c('10.1371/journal.pone.0001543','10.1371/journal.pone.0040117',
'10.1371/journal.pone.0029797','10.1371/journal.pone.0039395')
out <- alm(doi=dois)
out[[1]] # get data for the first DOI
dois <- searchplos(terms='evolution', fields='id', limit = 30)
out <- alm(doi=as.character(dois[,1]))
dois <- searchplos(terms='evolution', fields='id', limit = 3)
out <- alm(doi=as.character(dois[,1]))
lapply(out, head)
pmids <- c(19300479, 19390606, 19343216)
out <- alm(pmid=pmids)
out[[3]] # get data for the third pmid
alm(doi='10.1371/journal.pone.0039395', info='summary')
alm(doi='10.1371/journal.pone.0040117', days=30)
build_package(package="/Users/scottmac2/github/ropensci/rplos_sd", base_path="/Users/scottmac2/github/ropensci/rplos_sd/staticdocs", examples=TRUE)
roxygenize("/Users/scottmac2/github/ropensci/rplos_sd")
build_package(package="/Users/scottmac2/github/ropensci/rplos_sd", base_path="/Users/scottmac2/github/ropensci/rplos_sd/staticdocs", examples=TRUE)
roxygenize("/Users/scottmac2/github/ropensci/rplos_sd")
build_package(package="/Users/scottmac2/github/ropensci/rplos_sd", base_path="/Users/scottmac2/github/ropensci/rplos_sd/staticdocs", examples=TRUE)
out <- alm(doi='10.1371/journal.pone.0001543', info='detail')
out
almplot(out, type='totals') # just totalmetrics data
almplot(out, type='totalmetrics') # just totalmetrics data
almplot(dat=out, type='history') # just historical data
almplot(dat=out) # leaving type as NULL prints both plots
roxygenize("/Users/scottmac2/github/ropensci/rplos_sd")
build_package(package="/Users/scottmac2/github/ropensci/rplos_sd", base_path="/Users/scottmac2/github/ropensci/rplos_sd/staticdocs", examples=TRUE)
out <- alm(doi='10.1371/journal.pone.0001543', info='detail')
almplot(out, type='totalmetrics') # just totalmetrics data
almplot(dat=out, type='history') # just historical data
almplot(dat=out) # leaving type as NULL prints both plots
getkey()
roxygenize("/Users/scottmac2/github/ropensci/rplos_sd")
build_package(package="/Users/scottmac2/github/ropensci/rplos_sd", base_path="/Users/scottmac2/github/ropensci/rplos_sd/staticdocs", examples=TRUE)
library(roxygen2); library(testthat)
taxize <- "/Users/scottmac2/github/ropensci/taxize_"
roxygenise(taxize)
install_github("taxize_", "ropensci")
library(taxize)
help(package="taxize")
setwd("~/")
setwd("/Users/scottmac2/github/sac/scott/_posts")
knitpost("/Users/scottmac2/github/sac/scott/_drafts/2013-01-25-where-to-publish.Rmd")
