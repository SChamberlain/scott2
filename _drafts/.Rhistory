mat_onemode
mat
mat_onemode
mat
as.data.frame(small1976) # convert to data.frame
mat_elist
matrix(c(mat_elist$col, mat_elist$row))
matrix(cbind(mat_elist$col, mat_elist$row))
matrix(list(mat_elist$col, mat_elist$row))
mat_elist$col
mat_elist[,1]
mat_elist[,2]
matrix(c(mat_elist[,1], mat_elist[,2]))
matrix(c(mat_elist[,1], mat_elist[,2]), ncol=2)
mat_elist
matrix(c(mat_elist[,1], mat_elist[,2]), ncol=2)
mat_elist
matrix(c(mat_elist[,2], mat_elist[,2]), ncol=2)
mat_elist
matrix(c(mat_elist[,2], mat_elist[,1]), ncol=2)
mat2 <- matrix(c(mat_elist[,2], mat_elist[,1]), ncol=2)
matrix(c(mat_elist[,2], mat_elist[,1]), ncol=2)
matrix(c(mat_elist[,2], mat_elist[,1], mat_elist[,3]), ncol=2)
matrix(c(mat_elist[,2], mat_elist[,1], mat_elist[,3]), ncol=3)
mat2 <- matrix(c(mat_elist[,2], mat_elist[,1], mat_elist[,3]), ncol=3)
mat_onemode <- projecting_tm(mat2, method="Newman") # make into one-mode network
mat_onemode
onemode_pollinators <- projecting_tm(mat2, method="sum") # make into one-mode network
onemode_pollinators
mat
onemode_pollinators <- projecting_tm(mat2, method="binary") # make into one-mode network
onemode_pollinators
onemode_pollinators <- projecting_tm(mat2, method="Newman") # make into one-mode network
onemode_pollinators
mat
mat_elist
mat2
mat_elist
onemode_plants
onemode_plants <- projecting_tm(mat_elist, method="Newman") # make into one-mode network
data(small1976) # load small1976 network (itâ€™s a matrix)
mat <- as.data.frame(small1976) # convert to data.frame
mat <- mat[, 1:10] # get samller matrix for ease
row.names(mat) <- NULL
mat_elist <- web2edges(mat, return=T) # convert to edgelist
onemode_plants <- projecting_tm(mat_elist, method="Newman") # make into one-mode network
mat_elist
onemode_plants
mat2 <- matrix(c(mat_elist[,2], mat_elist[,1], mat_elist[,3]), ncol=3) # rearrange to get pollinators in first column
onemode_pollinators <- projecting_tm(mat2, method="Newman") # make into one-mode network
onemode_pollinators
names(mat_elist)
names(mat_elist) <- NULL; names(onemode_plants) <- NULL; names(onemode_pollinators) <- NULL
rbind(mat_elist, onemode_plants, onemode_pollinators)
names(onemode_pollinators)
names(onemode_plants)
onemode_plants
onemode_pollinators
names(mat_elist) <- c("i","j","w")
mat_elist
dimnames(mat_elist)
mat_elist <- web2edges(mat, return=T) # convert to edgelist
mat_elist
dimnames(mat_elist)
dimnames(mat_elist)[[2]]
dimnames(mat_elist)[[2]] <- c("i","j","w")
dimnames(mat_elist)[[2]]
mat_elist
dimnames(onemode_plants)[[2]] <- c("i","j","w")
dimnames(onemode_pollinators)[[2]] <- c("i","j","w")L
rbind(mat_elist, onemode_plants, onemode_pollinators)
dimnames(onemode_plants)
onemode_plants
onemode_pollinators
dimnames(onemode_pollinators)
onemode_pollinators <- projecting_tm(mat2, method="Newman") # make into one-mode network
dimnames(onemode_pollinators)
rbind(mat_elist, onemode_plants, onemode_pollinators)
ee <- rbind(mat_elist, onemode_plants, onemode_pollinators)
dcast(ee, i ~ j, value.var="w")
ee <- rbind(mat_elist, onemode_plants, onemode_pollinators)
ee_ <- dcast(ee, i ~ j, value.var="w")
ee_[is.na(ee_)] <- 0
row.names(ee_) <- ee_[,1]
ee_ <- ee_[,-1]
ee_
plotweb(mat) # bipartite plot
plotweb(ee_) # bipartite plot
mat_onemode
ee
tnet_igraph(ee, directed=F)
ee__ <- tnet_igraph(ee, directed=F)
plot(ee__) # bipartite plot
ee__
ee_
ee
onemode_pollinators
data.frame(type = poll, onemode_pollinators)
data.frame(type = rep("poll", nrow(onemode_pollinators)), onemode_pollinators)
mat_elist_ <- data.frame(type = rep("poll", nrow(mat_elist)), mat_elist)
onemode_plants_ <- data.frame(type = rep("poll", nrow(onemode_plants)), onemode_plants)
onemode_pollinators_ <- data.frame(type = rep("poll", nrow(onemode_pollinators)), onemode_pollinators)
ff <- rbind(mat_elist_, onemode_plants_, onemode_pollinators_)
ff
head(ff)
require(bipartite)
require(igraph)
require(ggplot2)
require(NetIndices)
gggraph <- function(g, vplace = rnorm, method, trophic = "FALSE",
trophinames, import, export)
{
degreex  <- function(x) {
degreecol <- apply(x, 2, function(y) length(y[y>0]))
degreerow <- apply(x, 1, function(y) length(y[y>0]))
degrees <- sort(c(degreecol, degreerow))
df <- data.frame(degrees, x = seq(1, length(degrees), 1))
df$value <- rownames(df)
df
}
# require igraph
if(!require(igraph)) stop("must first install 'igraph' package.")
# require ggplot2
if(!require(ggplot2)) stop("must first install 'ggplot2' package.")
if(method=="df"){
if(class(g)=="matrix"){ g <- as.data.frame(g) }
if(class(g)!="data.frame") stop("object must be of class 'data.frame.'")
if(trophic=="FALSE"){
# data preparation from adjacency matrix
temp <- data.frame(expand.grid(dimnames(g))[1:2], as.vector(as.matrix(g)))
temp <- temp[(temp[, 3] > 0) & !is.na(temp[, 3]), ]
temp <- temp[sort.list(temp[, 1]), ]
g_df <- data.frame(rows = temp[, 1], cols = temp[, 2], freqint = temp[, 3])
g_df$id <- 1:length(g_df[,1])
g_df <- data.frame(id=g_df[,4], rows=g_df[,1], cols=g_df[,2], freqint=g_df[,3])
g_df_ <- melt(g_df, id=c(1,4))
xy_s <- data.frame(degreex(g), y = rnorm(length(unique(g_df_$value))))
g_df_2 <- merge(g_df_, xy_s, by = "value")
} else if(trophic=="TRUE") {
# require NetIndices
if(!require(NetIndices)) stop("must first install 'NetIndices' package.")
# data preparation from adjacency matrix
temp <- data.frame(expand.grid(dimnames(g[-trophinames, -trophinames]))[1:2],
as.vector(as.matrix(g[-trophinames, -trophinames])))
temp <- temp[(temp[, 3] > 0) & !is.na(temp[, 3]), ]
temp <- temp[sort.list(temp[, 1]), ]
g_df <- data.frame(rows = temp[, 1], cols = temp[, 2], freqint = temp[, 3])
g_df$id <- 1:length(g_df[,1])
g_df <- data.frame(id=g_df[,4], rows=g_df[,1],
cols=g_df[,2], freqint=g_df[,3])
g_df_ <- melt(g_df, id=c(1,4))
xy_s <- data.frame(value = unique(g_df_$value),
x = rnorm(length(unique(g_df_$value))),
y = TrophInd(g, Import=import, Export=export)[,1])
g_df_2 <- merge(g_df_, xy_s, by = "value")
}
# plotting
p <- ggplot(g_df_2, aes(x, y)) +
geom_point(size = 5) +
geom_line(aes(size = freqint, group = id)) +
geom_text(size = 3, hjust = 1.5, aes(label = value)) +
theme_bw() +
opts(panel.grid.major=theme_blank(),
panel.grid.minor=theme_blank(),
axis.text.x=theme_blank(),
axis.text.y=theme_blank(),
axis.title.x=theme_blank(),
axis.title.y=theme_blank(),
axis.ticks=theme_blank(),
panel.border=theme_blank(),
legend.position="none")
p # return graph
} else if(method=="igraph") {
if(class(g)!="igraph") stop("object must be of class 'igraph.'")
# data preparation from igraph object
g_ <- get.edgelist(g)
g_df <- as.data.frame(g_)
g_df$id <- 1:length(g_df[,1])
g_df <- melt(g_df, id=3)
xy_s <- data.frame(value = unique(g_df$value),
x = vplace(length(unique(g_df$value))),
y = vplace(length(unique(g_df$value))))
g_df2 <- merge(g_df, xy_s, by = "value")
# plotting
p <- ggplot(g_df2, aes(x, y)) +
geom_point(size = 2) +
geom_line(size = 0.3, aes(group = id, linetype = id)) +
geom_text(size = 3, hjust = 1.5, aes(label = value)) +
theme_bw() +
opts(panel.grid.major=theme_blank(),
panel.grid.minor=theme_blank(),
axis.text.x=theme_blank(),
axis.text.y=theme_blank(),
axis.title.x=theme_blank(),
axis.title.y=theme_blank(),
axis.ticks=theme_blank(),
panel.border=theme_blank(),
legend.position="none")
p # return graph
} else
stop(paste("do not recognize method = \"",method,"\";
methods are \"df\" and \"igraph\"",sep=""))
}
data(Takapoto)
gggraph(Takapoto, vplace = rnorm, method = "df", trophic = "TRUE",
trophinames = c(8:10), import = "CO2",
export = c("CO2", "Sedimentation", "Grazing"))
# gggraph, version 3
# g = an igraph graph object, a matrix, or data frame
# vplace = type of vertex placement assignment, one of rnorm, runif, etc.
# method = one of 'df' for data frame, "mat' for matrix or "igraph" for an igraph graph object
# trophic = TRUE or FALSE for using Netindices function TrophInd to determine trophic level (y value in graph)
# trophinames = columns in matrix or dataframe to use for calculating trophic level
# import = named or refereced by col# columns of matrix or dataframe to use for import argument of TrophInd
# export = named or refereced by col# columns of matrix or dataframe to use for export argument of TrophInd
# dead = named or refereced by col# columns of matrix or dataframe to use for dead argument of TrophInd
gggraph <- function(g, vplace = rnorm, method, trophic = "FALSE",
trophinames, import, export)
{
degreex  <- function(x) {
degreecol <- apply(x, 2, function(y) length(y[y>0]))
degreerow <- apply(x, 1, function(y) length(y[y>0]))
degrees <- sort(c(degreecol, degreerow))
df <- data.frame(degrees, x = seq(1, length(degrees), 1))
df$value <- rownames(df)
df
}
# require igraph
if(!require(igraph)) stop("must first install 'igraph' package.")
# require ggplot2
if(!require(ggplot2)) stop("must first install 'ggplot2' package.")
if(method=="df"){
if(class(g)=="matrix"){ g <- as.data.frame(g) }
if(class(g)!="data.frame") stop("object must be of class 'data.frame.'")
if(trophic=="FALSE"){
# data preparation from adjacency matrix
temp <- data.frame(expand.grid(dimnames(g))[1:2], as.vector(as.matrix(g)))
temp <- temp[(temp[, 3] > 0) & !is.na(temp[, 3]), ]
temp <- temp[sort.list(temp[, 1]), ]
g_df <- data.frame(rows = temp[, 1], cols = temp[, 2], freqint = temp[, 3])
g_df$id <- 1:length(g_df[,1])
g_df <- data.frame(id=g_df[,4], rows=g_df[,1], cols=g_df[,2], freqint=g_df[,3])
g_df_ <- melt(g_df, id=c(1,4))
xy_s <- data.frame(degreex(g), y = rnorm(length(unique(g_df_$value))))
g_df_2 <- merge(g_df_, xy_s, by = "value")
} else if(trophic=="TRUE") {
# require NetIndices
if(!require(NetIndices)) stop("must first install 'NetIndices' package.")
# data preparation from adjacency matrix
temp <- data.frame(expand.grid(dimnames(g[-trophinames, -trophinames]))[1:2],
as.vector(as.matrix(g[-trophinames, -trophinames])))
temp <- temp[(temp[, 3] > 0) & !is.na(temp[, 3]), ]
temp <- temp[sort.list(temp[, 1]), ]
g_df <- data.frame(rows = temp[, 1], cols = temp[, 2], freqint = temp[, 3])
g_df$id <- 1:length(g_df[,1])
g_df <- data.frame(id=g_df[,4], rows=g_df[,1],
cols=g_df[,2], freqint=g_df[,3])
g_df_ <- melt(g_df, id=c(1,4))
xy_s <- data.frame(value = unique(g_df_$value),
x = rnorm(length(unique(g_df_$value))),
y = TrophInd(g, Import=import, Export=export)[,1])
g_df_2 <- merge(g_df_, xy_s, by = "value")
}
# plotting
p <- ggplot(g_df_2, aes(x, y)) +
geom_point(size = 5) +
geom_line(aes(size = freqint, group = id)) +
geom_text(size = 3, hjust = 1.5, aes(label = value)) +
theme_bw() +
opts(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks=element_blank(),
panel.border=element_blank(),
legend.position="none")
p # return graph
} else if(method=="igraph") {
if(class(g)!="igraph") stop("object must be of class 'igraph.'")
# data preparation from igraph object
g_ <- get.edgelist(g)
g_df <- as.data.frame(g_)
g_df$id <- 1:length(g_df[,1])
g_df <- melt(g_df, id=3)
xy_s <- data.frame(value = unique(g_df$value),
x = vplace(length(unique(g_df$value))),
y = vplace(length(unique(g_df$value))))
g_df2 <- merge(g_df, xy_s, by = "value")
# plotting
p <- ggplot(g_df2, aes(x, y)) +
geom_point(size = 2) +
geom_line(size = 0.3, aes(group = id, linetype = id)) +
geom_text(size = 3, hjust = 1.5, aes(label = value)) +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks=element_blank(),
panel.border=element_blank(),
legend.position="none")
p # return graph
} else
stop(paste("do not recognize method = \"",method,"\";
methods are \"df\" and \"igraph\"",sep=""))
}
gggraph(Takapoto, vplace = rnorm, method = "df", trophic = "TRUE",
trophinames = c(8:10), import = "CO2",
export = c("CO2", "Sedimentation", "Grazing"))
# gggraph, version 3
# g = an igraph graph object, a matrix, or data frame
# vplace = type of vertex placement assignment, one of rnorm, runif, etc.
# method = one of 'df' for data frame, "mat' for matrix or "igraph" for an igraph graph object
# trophic = TRUE or FALSE for using Netindices function TrophInd to determine trophic level (y value in graph)
# trophinames = columns in matrix or dataframe to use for calculating trophic level
# import = named or refereced by col# columns of matrix or dataframe to use for import argument of TrophInd
# export = named or refereced by col# columns of matrix or dataframe to use for export argument of TrophInd
# dead = named or refereced by col# columns of matrix or dataframe to use for dead argument of TrophInd
gggraph <- function(g, vplace = rnorm, method, trophic = "FALSE",
trophinames, import, export)
{
degreex  <- function(x) {
degreecol <- apply(x, 2, function(y) length(y[y>0]))
degreerow <- apply(x, 1, function(y) length(y[y>0]))
degrees <- sort(c(degreecol, degreerow))
df <- data.frame(degrees, x = seq(1, length(degrees), 1))
df$value <- rownames(df)
df
}
# require igraph
if(!require(igraph)) stop("must first install 'igraph' package.")
# require ggplot2
if(!require(ggplot2)) stop("must first install 'ggplot2' package.")
if(method=="df"){
if(class(g)=="matrix"){ g <- as.data.frame(g) }
if(class(g)!="data.frame") stop("object must be of class 'data.frame.'")
if(trophic=="FALSE"){
# data preparation from adjacency matrix
temp <- data.frame(expand.grid(dimnames(g))[1:2], as.vector(as.matrix(g)))
temp <- temp[(temp[, 3] > 0) & !is.na(temp[, 3]), ]
temp <- temp[sort.list(temp[, 1]), ]
g_df <- data.frame(rows = temp[, 1], cols = temp[, 2], freqint = temp[, 3])
g_df$id <- 1:length(g_df[,1])
g_df <- data.frame(id=g_df[,4], rows=g_df[,1], cols=g_df[,2], freqint=g_df[,3])
g_df_ <- melt(g_df, id=c(1,4))
xy_s <- data.frame(degreex(g), y = rnorm(length(unique(g_df_$value))))
g_df_2 <- merge(g_df_, xy_s, by = "value")
} else if(trophic=="TRUE") {
# require NetIndices
if(!require(NetIndices)) stop("must first install 'NetIndices' package.")
# data preparation from adjacency matrix
temp <- data.frame(expand.grid(dimnames(g[-trophinames, -trophinames]))[1:2],
as.vector(as.matrix(g[-trophinames, -trophinames])))
temp <- temp[(temp[, 3] > 0) & !is.na(temp[, 3]), ]
temp <- temp[sort.list(temp[, 1]), ]
g_df <- data.frame(rows = temp[, 1], cols = temp[, 2], freqint = temp[, 3])
g_df$id <- 1:length(g_df[,1])
g_df <- data.frame(id=g_df[,4], rows=g_df[,1],
cols=g_df[,2], freqint=g_df[,3])
g_df_ <- melt(g_df, id=c(1,4))
xy_s <- data.frame(value = unique(g_df_$value),
x = rnorm(length(unique(g_df_$value))),
y = TrophInd(g, Import=import, Export=export)[,1])
g_df_2 <- merge(g_df_, xy_s, by = "value")
}
# plotting
p <- ggplot(g_df_2, aes(x, y)) +
geom_point(size = 5) +
geom_line(aes(size = freqint, group = id)) +
geom_text(size = 3, hjust = 1.5, aes(label = value)) +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks=element_blank(),
panel.border=element_blank(),
legend.position="none")
p # return graph
} else if(method=="igraph") {
if(class(g)!="igraph") stop("object must be of class 'igraph.'")
# data preparation from igraph object
g_ <- get.edgelist(g)
g_df <- as.data.frame(g_)
g_df$id <- 1:length(g_df[,1])
g_df <- melt(g_df, id=3)
xy_s <- data.frame(value = unique(g_df$value),
x = vplace(length(unique(g_df$value))),
y = vplace(length(unique(g_df$value))))
g_df2 <- merge(g_df, xy_s, by = "value")
# plotting
p <- ggplot(g_df2, aes(x, y)) +
geom_point(size = 2) +
geom_line(size = 0.3, aes(group = id, linetype = id)) +
geom_text(size = 3, hjust = 1.5, aes(label = value)) +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks=element_blank(),
panel.border=element_blank(),
legend.position="none")
p # return graph
} else
stop(paste("do not recognize method = \"",method,"\";
methods are \"df\" and \"igraph\"",sep=""))
}
gggraph(Takapoto, vplace = rnorm, method = "df", trophic = "TRUE",
trophinames = c(8:10), import = "CO2",
export = c("CO2", "Sedimentation", "Grazing"))
gggraph(Takapoto, vplace = rnorm, method = "df", trophic = "TRUE",
trophinames = c(8:10), import = "CO2",
export = c("CO2", "Sedimentation", "Grazing"))
gggraph(Takapoto, vplace = rnorm, method = "df", trophic = "TRUE",
trophinames = c(8:10), import = "CO2",
export = c("CO2", "Sedimentation", "Grazing"))
gggraph(Takapoto, vplace = rnorm, method = "df", trophic = "TRUE",
trophinames = c(8:10), import = "CO2",
export = c("CO2", "Sedimentation", "Grazing"))
plants <- round(rlnorm(n=5, meanlog=2, sdlog=1))
animals <- round(rlnorm(n=5, meanlog=2, sdlog=1))
plants <- plants*(100/sum(plants))
animals <- animals*(100/sum(animals))
z <- r2dtable(1,animals,plants)  # if errors, rerun again until no error
z <- as.data.frame(z[[1]])
rownames(z) <- c("a","b","c","d","e")
z
gggraph(z, vplace = rnorm, method = "df", trophic = "FALSE")
g <- grg.game(20, 0.45, torus=FALSE)
gggraph(g, vplace = rnorm, method = "igraph", trophic = "FALSE")
z
gggraph(ee__, vplace = rnorm, method = "df", trophic = "FALSE")
as.data.frame(ee__)
ee_
as.data.frame(ee_)
gggraph(as.data.frame(ee_), vplace = rnorm, method = "df", trophic = "FALSE")
gggraph(as.data.frame(ee_), vplace = rnorm, method = "df", trophic = "FALSE")
gggraph(as.data.frame(ee_), vplace = rnorm, method = "df", trophic = "FALSE")
gggraph(as.data.frame(ee_), vplace = rnorm, method = "df", trophic = "FALSE")
ff
x <- ff
g
g <- ff
g
expand.grid(dimnames(g))[1:2]
Takapoto
g
gg <- g[,-1]
gg
g <- gg
expand.grid(dimnames(g))[1:2]
as.vector(as.matrix(g))
temp <- data.frame(expand.grid(dimnames(g))[1:2], as.vector(as.matrix(g)))
temp
ff
g <- ff[,-c(1,4)]
temp <- data.frame(expand.grid(dimnames(g))[1:2], as.vector(as.matrix(g)))
temp
temp <- temp[(temp[, 3] > 0) & !is.na(temp[, 3]), ]
temp
temp <- temp[sort.list(temp[, 1]), ]
g_df <- data.frame(rows = temp[, 1], cols = temp[, 2], freqint = temp[, 3])
g_df
g_df$id <- 1:length(g_df[,1])
g_df <- data.frame(id=g_df[,4], rows=g_df[,1], cols=g_df[,2], freqint=g_df[,3])
g_df_ <- melt(g_df, id=c(1,4))
g_df_
xy_s <- data.frame(degreex(g), y = rnorm(length(unique(g_df_$value))))
g_df_2 <- merge(g_df_, xy_s, by = "value")
degreex  <- function(x) {
degreecol <- apply(x, 2, function(y) length(y[y>0]))
degreerow <- apply(x, 1, function(y) length(y[y>0]))
degrees <- sort(c(degreecol, degreerow))
df <- data.frame(degrees, x = seq(1, length(degrees), 1))
df$value <- rownames(df)
df
}
xy_s <- data.frame(degreex(g), y = rnorm(length(unique(g_df_$value))))
xy_s
g_df_2 <- merge(g_df_, xy_s, by = "value")
g_df_2
ggplot(g_df_2, aes(x, y)) +
geom_point(size = 5) +
geom_line(aes(size = freqint, group = id)) +
geom_text(size = 3, hjust = 1.5, aes(label = value)) +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks=element_blank(),
panel.border=element_blank(),
legend.position="none")
plot(ee__)
plot(ee__)
plot(ee__)
plot(ee__)
plot(ee__)
knitpost("/Users/ScottMac/github/SChamberlain/scott/_drafts/2012-09-20-network-roles.Rmd")
knitpost("/Users/ScottMac/github/SChamberlain/scott/_drafts/2012-09-20-network-roles.Rmd")
knitpost("/Users/ScottMac/github/SChamberlain/scott/_drafts/2012-09-20-network-roles.Rmd")
